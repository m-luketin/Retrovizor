// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Retrovizor.Data.Entities;

namespace Retrovizor.Data.Migrations
{
    [DbContext(typeof(RetrovizorContext))]
    [Migration("20190805101448_SeededData")]
    partial class SeededData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrivingSchoolId");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrivingSchoolId = 1,
                            Password = "",
                            Username = "Duje"
                        },
                        new
                        {
                            Id = 2,
                            DrivingSchoolId = 1,
                            Password = "",
                            Username = "Kreso"
                        },
                        new
                        {
                            Id = 3,
                            DrivingSchoolId = 2,
                            Password = "",
                            Username = "Drazen"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCorrect");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Ako je cesta mokra"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Ako je cesta s nepreglednim dionicama"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Ako je cesta prekrivena snijegom"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "Kad posjeduje potrebne vjestine"
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Kad je umoran"
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Kad je pod utjecajem alkohola ili droga"
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "Svako vozilo koje se pokrece snagom vlastitog motora, osim vozila koja se krecu po tracnicama"
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Svako prijevozno sredstvo namijenjeno za kretanje po cesti"
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = true,
                            QuestionId = 4,
                            Text = "Masa vozila zajedno s njegovom nosivoscu"
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "Masa vozila s teretom u vozilu ili na vozilu"
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            QuestionId = 5,
                            Text = "Paljenjem svih pokazivaca smjera"
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = true,
                            QuestionId = 5,
                            Text = "Kratkim uzastopnim paljenjem dugih svjetala"
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = true,
                            QuestionId = 5,
                            Text = "Naizmjenicnim paljenjem dugih i kratkih svjetala"
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = false,
                            QuestionId = 6,
                            Text = "Svjetla za maglu"
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = true,
                            QuestionId = 6,
                            Text = "Pokazivaci smjera"
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = true,
                            QuestionId = 6,
                            Text = "Stop-svjetla"
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = true,
                            QuestionId = 7,
                            Text = "Prometne uvjete na cesti kojom vozi"
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            QuestionId = 7,
                            Text = "Jambo plakate"
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = true,
                            QuestionId = 7,
                            Text = "Kretanje ostalih sudionika u prometu"
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = true,
                            QuestionId = 8,
                            Text = "Osigurati vozilo u zakocenom polozaju"
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Sprijeciti zanosenje vozila prilikom nagloga kocenja"
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            QuestionId = 8,
                            Text = "Osigurati bolje kocenje na mokrom kolniku"
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = true,
                            QuestionId = 9,
                            Text = "Zajedno sa zelenim svjetlom prije pojave crvenog svjetla"
                        },
                        new
                        {
                            Id = 24,
                            IsCorrect = false,
                            QuestionId = 9,
                            Text = "Zajedno sa crvenim svjetlom prije pojave zelenog svjetla"
                        },
                        new
                        {
                            Id = 25,
                            IsCorrect = true,
                            QuestionId = 9,
                            Text = "Kao samostalno svjetlo"
                        },
                        new
                        {
                            Id = 26,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Prelazenje vozilom iz jedne u drugu prometnu traku radi brzega kretanja"
                        },
                        new
                        {
                            Id = 27,
                            IsCorrect = true,
                            QuestionId = 10,
                            Text = "Zauzimanje takvog polozaja vozilom na prometnoj traci iz kojeg se moze na siguran nacin izvesti naredna radnja s vozilom"
                        },
                        new
                        {
                            Id = 28,
                            IsCorrect = false,
                            QuestionId = 10,
                            Text = "Prolazenje vozilom pokraj drugog vozila koje se krece u istom smjeru"
                        },
                        new
                        {
                            Id = 29,
                            IsCorrect = true,
                            QuestionId = 11,
                            Text = "Ugljikov monoksid"
                        },
                        new
                        {
                            Id = 30,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "Duhanski dim"
                        },
                        new
                        {
                            Id = 31,
                            IsCorrect = false,
                            QuestionId = 11,
                            Text = "Natrijev klorid"
                        },
                        new
                        {
                            Id = 32,
                            IsCorrect = true,
                            QuestionId = 12,
                            Text = "Bocni polozaj"
                        },
                        new
                        {
                            Id = 33,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "Polusjedeci polozaj"
                        },
                        new
                        {
                            Id = 34,
                            IsCorrect = false,
                            QuestionId = 12,
                            Text = "Polulezeci polozaj"
                        },
                        new
                        {
                            Id = 35,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "14-16 puta na sat"
                        },
                        new
                        {
                            Id = 36,
                            IsCorrect = true,
                            QuestionId = 13,
                            Text = "12-20 puta u jednoj minuti"
                        },
                        new
                        {
                            Id = 37,
                            IsCorrect = false,
                            QuestionId = 13,
                            Text = "12 do 20 puta na dan"
                        },
                        new
                        {
                            Id = 38,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "Ubrzavanje refleksa"
                        },
                        new
                        {
                            Id = 39,
                            IsCorrect = false,
                            QuestionId = 14,
                            Text = "Povecanje koncentracije i moci pamcenja"
                        },
                        new
                        {
                            Id = 40,
                            IsCorrect = true,
                            QuestionId = 14,
                            Text = "Pospanost i jako usporavanje refleksa"
                        },
                        new
                        {
                            Id = 41,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "Povrijeđenog zakopati u zemlju da bi zemlja izvukla struju"
                        },
                        new
                        {
                            Id = 42,
                            IsCorrect = true,
                            QuestionId = 15,
                            Text = "Ukloniti izvor struje ili isključiti osigurač"
                        },
                        new
                        {
                            Id = 43,
                            IsCorrect = false,
                            QuestionId = 15,
                            Text = "Odmah započeti sa oživljavanjem ili reanimacijom"
                        },
                        new
                        {
                            Id = 44,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "60-80 otkucaja u jednom satu"
                        },
                        new
                        {
                            Id = 45,
                            IsCorrect = true,
                            QuestionId = 16,
                            Text = "60-80 otkucaja u jednoj minuti"
                        },
                        new
                        {
                            Id = 46,
                            IsCorrect = false,
                            QuestionId = 16,
                            Text = "60-80 otkucaja u jednoj sekundi"
                        },
                        new
                        {
                            Id = 47,
                            IsCorrect = true,
                            QuestionId = 17,
                            Text = "Krv je tamno-crvene boje i ravnomjerno curi preko ruba rane"
                        },
                        new
                        {
                            Id = 48,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Veoma teško se zaustavlja"
                        },
                        new
                        {
                            Id = 49,
                            IsCorrect = false,
                            QuestionId = 17,
                            Text = "Izlazi u mlazevima i tamno-crne je boje"
                        },
                        new
                        {
                            Id = 50,
                            IsCorrect = true,
                            QuestionId = 18,
                            Text = "Jedan od sigurnih znakova smrti"
                        },
                        new
                        {
                            Id = 51,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "Vrsta raskrizja"
                        },
                        new
                        {
                            Id = 52,
                            IsCorrect = false,
                            QuestionId = 18,
                            Text = "Mačka na cesti"
                        },
                        new
                        {
                            Id = 53,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "Pojacavanje boli kod povrijedenog"
                        },
                        new
                        {
                            Id = 54,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "Sprjecavanje povrijedenog od izvodenja sportskih aktivnosti"
                        },
                        new
                        {
                            Id = 55,
                            IsCorrect = false,
                            QuestionId = 19,
                            Text = "Sprjecavanje dodatnih povreda kod ozlijedjenog"
                        },
                        new
                        {
                            Id = 56,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "Za teske opekotine"
                        },
                        new
                        {
                            Id = 57,
                            IsCorrect = false,
                            QuestionId = 20,
                            Text = "Za imobilizaciju prijeloma"
                        },
                        new
                        {
                            Id = 58,
                            IsCorrect = true,
                            QuestionId = 20,
                            Text = "Kad zelimo zaustaviti krvarenje"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("TotalLessons");

                    b.HasKey("Id");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Propisi",
                            TotalLessons = 15
                        },
                        new
                        {
                            Id = 2,
                            Name = "Prva pomoc",
                            TotalLessons = 10
                        },
                        new
                        {
                            Id = 3,
                            Name = "Voznja B",
                            TotalLessons = 35
                        },
                        new
                        {
                            Id = 4,
                            Name = "Voznja A1",
                            TotalLessons = 20
                        },
                        new
                        {
                            Id = 5,
                            Name = "Voznja A2",
                            TotalLessons = 25
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.DrivingSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DrivingSchools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dubrovacka 34",
                            Name = "Sprint"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Vukovarska 59",
                            Name = "Golf"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndsAt");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartsAt");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndsAt = new DateTime(2019, 8, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 1,
                            Name = "Predavanje Propisi 1",
                            StartsAt = new DateTime(2019, 8, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 2,
                            EndsAt = new DateTime(2019, 8, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 1,
                            Name = "Predavanje Propisi 2",
                            StartsAt = new DateTime(2019, 8, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 3,
                            EndsAt = new DateTime(2019, 8, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 1,
                            Name = "Predavanje Propisi 3",
                            StartsAt = new DateTime(2019, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 4,
                            EndsAt = new DateTime(2019, 8, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 2,
                            Name = "Predavanje Prva Pomoc 1",
                            StartsAt = new DateTime(2019, 8, 11, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 5,
                            EndsAt = new DateTime(2019, 8, 12, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 2,
                            Name = "Predavanje Prva Pomoc 2",
                            StartsAt = new DateTime(2019, 8, 12, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 6,
                            EndsAt = new DateTime(2019, 8, 13, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 2,
                            Name = "Predavanje Prva Pomoc 3",
                            StartsAt = new DateTime(2019, 8, 13, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 7,
                            EndsAt = new DateTime(2019, 8, 11, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 3,
                            Name = "Voznja",
                            StartsAt = new DateTime(2019, 8, 11, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Voznja"
                        },
                        new
                        {
                            Id = 8,
                            EndsAt = new DateTime(2019, 8, 12, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 3,
                            Name = "Voznja",
                            StartsAt = new DateTime(2019, 8, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Voznja"
                        },
                        new
                        {
                            Id = 9,
                            EndsAt = new DateTime(2019, 8, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 3,
                            Name = "Voznja",
                            StartsAt = new DateTime(2019, 8, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Voznja"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PointsToPass");

                    b.Property<int>("TotalPoints");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PointsToPass = 108,
                            TotalPoints = 120,
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 2,
                            PointsToPass = 40,
                            TotalPoints = 60,
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 3,
                            PointsToPass = 50,
                            TotalPoints = 100,
                            Type = "Voznja"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrivingSchoolId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("OIB");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Username");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrivingSchoolId = 1,
                            FirstName = "Izabela",
                            LastName = "Domazet",
                            OIB = "12345123451",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "IDomazet",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DrivingSchoolId = 1,
                            FirstName = "Mario",
                            LastName = "Ceprnja",
                            OIB = "12345123452",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "MCeprnja",
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 3,
                            DrivingSchoolId = 1,
                            FirstName = "Zvonimir",
                            LastName = "Delas",
                            OIB = "12345123453",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "ZDelas",
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 4,
                            DrivingSchoolId = 2,
                            FirstName = "Josip",
                            LastName = "Svalina",
                            OIB = "12345123454",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "JSvalina",
                            VehicleId = 4
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dubrovacka 34",
                            Latitude = 43.519500000000001,
                            Longitude = 16.449399999999969
                        },
                        new
                        {
                            Id = 2,
                            Address = "Vukovarska 59",
                            Latitude = 43.511376300000002,
                            Longitude = 16.447716799999998
                        },
                        new
                        {
                            Id = 3,
                            Address = "Solinska ulica",
                            Latitude = 43.523219900000001,
                            Longitude = 16.462575600000001
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("Text");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "",
                            Text = "U kojim ce uvjetima prijanjanje guma na cesti biti smanjeno?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 2,
                            Image = "",
                            Text = "Kad vozac reagira brze?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 3,
                            Image = "",
                            Text = "Sto je motorno vozilo?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 4,
                            Image = "",
                            Text = "Sto je najveca dopustena masa vozila?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 5,
                            Image = "",
                            Text = "Kako vozac daje svjetlosni znak upozorenja ostalim sudionicima u prometu?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 6,
                            Image = "",
                            Text = "Sto se podrazumijeva pod svjetlosnim znakovima upozorenja u prometu?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 7,
                            Image = "",
                            Text = "Sto vozac mora stalno pratiti za vrijeme voznje?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 8,
                            Image = "",
                            Text = "Koja je uloga parkirne kocnice na motornom vozilu?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 9,
                            Image = "",
                            Text = "Kako se na semaforu moze pojaviti zuto svjetlo?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 10,
                            Image = "",
                            Text = "Sto je prestrojavanje?",
                            Type = "Propisi"
                        },
                        new
                        {
                            Id = 11,
                            Image = "",
                            Text = "Koji plin se oslobađa pri izgaranju benzina, a koji u zatvorenom prostoru može izazvati smrt?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 12,
                            Image = "",
                            Text = "Ozlijedenu osobu koja je dozivjela epilepticki napadaj stavljamo u koju poziciju?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 13,
                            Image = "",
                            Text = "Koji je ljudski ritam normalnog disanja?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 14,
                            Image = "",
                            Text = "Sto alkohol izaziva?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 15,
                            Image = "",
                            Text = "Koji je prvi postupak s ozlijedenim kod udara struje?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 16,
                            Image = "",
                            Text = "Koji je normalan ljudski ritam otkucaja srca?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 17,
                            Image = "",
                            Text = "Koje su karakteristike venskog krvarenja?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 18,
                            Image = "",
                            Text = "Sto je macje oko?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 19,
                            Image = "",
                            Text = "Koja je uloga imobilizacije?",
                            Type = "Prva pomoc"
                        },
                        new
                        {
                            Id = 20,
                            Image = "",
                            Text = "Za sto se upotrebljava kompresivni zavoj?",
                            Type = "Prva pomoc"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstructorId");

                    b.Property<string>("ReviewText");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InstructorId = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            InstructorId = 2,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            InstructorId = 3,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            InstructorId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 5,
                            InstructorId = 4,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 6,
                            InstructorId = 4,
                            StudentId = 8
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<int>("DrivingSchoolId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("OIB");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "A1",
                            DrivingSchoolId = 1,
                            FirstName = "Matija",
                            LastName = "Luketin",
                            OIB = "12345123461",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "MLuketin"
                        },
                        new
                        {
                            Id = 2,
                            Category = "B",
                            DrivingSchoolId = 1,
                            FirstName = "Luka",
                            LastName = "Nola",
                            OIB = "12345123462",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "LNola"
                        },
                        new
                        {
                            Id = 3,
                            Category = "B",
                            DrivingSchoolId = 1,
                            FirstName = "Nino",
                            LastName = "Borovic",
                            OIB = "12345123463",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "NBorovic"
                        },
                        new
                        {
                            Id = 4,
                            Category = "A2",
                            DrivingSchoolId = 1,
                            FirstName = "Luka",
                            LastName = "Bendic",
                            OIB = "12345123464",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "LBendic"
                        },
                        new
                        {
                            Id = 5,
                            Category = "B",
                            DrivingSchoolId = 1,
                            FirstName = "Klara Bruna",
                            LastName = "Tomic",
                            OIB = "12345123465",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "KTomic"
                        },
                        new
                        {
                            Id = 6,
                            Category = "",
                            DrivingSchoolId = 1,
                            FirstName = "Petra",
                            LastName = "Condic",
                            OIB = "12345123466",
                            Password = "B",
                            PhoneNumber = "00385976086801",
                            Username = "PCondic"
                        },
                        new
                        {
                            Id = 7,
                            Category = "B",
                            DrivingSchoolId = 2,
                            FirstName = "Alex",
                            LastName = "Amanzi",
                            OIB = "12345123467",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "AAmanzi"
                        },
                        new
                        {
                            Id = 8,
                            Category = "A",
                            DrivingSchoolId = 2,
                            FirstName = "Ante",
                            LastName = "Vuletic",
                            OIB = "12345123468",
                            Password = "",
                            PhoneNumber = "00385976086801",
                            Username = "AVuletic"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.StudentClass", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("ClassId");

                    b.Property<int>("CurrentLesson");

                    b.HasKey("StudentId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("StudentClasses");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            ClassId = 1,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 1,
                            ClassId = 2,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 2,
                            ClassId = 1,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 2,
                            ClassId = 2,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 3,
                            ClassId = 1,
                            CurrentLesson = 15
                        },
                        new
                        {
                            StudentId = 3,
                            ClassId = 2,
                            CurrentLesson = 10
                        },
                        new
                        {
                            StudentId = 4,
                            ClassId = 1,
                            CurrentLesson = 15
                        },
                        new
                        {
                            StudentId = 4,
                            ClassId = 2,
                            CurrentLesson = 10
                        },
                        new
                        {
                            StudentId = 5,
                            ClassId = 1,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 5,
                            ClassId = 2,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 6,
                            ClassId = 1,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 6,
                            ClassId = 2,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 7,
                            ClassId = 1,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 7,
                            ClassId = 2,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 8,
                            ClassId = 1,
                            CurrentLesson = 5
                        },
                        new
                        {
                            StudentId = 8,
                            ClassId = 2,
                            CurrentLesson = 5
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.StudentEvent", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("EventId");

                    b.HasKey("StudentId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("StudentEvents");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            EventId = 1
                        },
                        new
                        {
                            StudentId = 1,
                            EventId = 2
                        },
                        new
                        {
                            StudentId = 1,
                            EventId = 3
                        },
                        new
                        {
                            StudentId = 1,
                            EventId = 4
                        },
                        new
                        {
                            StudentId = 1,
                            EventId = 5
                        },
                        new
                        {
                            StudentId = 1,
                            EventId = 6
                        },
                        new
                        {
                            StudentId = 2,
                            EventId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            EventId = 2
                        },
                        new
                        {
                            StudentId = 2,
                            EventId = 3
                        },
                        new
                        {
                            StudentId = 2,
                            EventId = 4
                        },
                        new
                        {
                            StudentId = 2,
                            EventId = 5
                        },
                        new
                        {
                            StudentId = 2,
                            EventId = 6
                        },
                        new
                        {
                            StudentId = 5,
                            EventId = 1
                        },
                        new
                        {
                            StudentId = 5,
                            EventId = 2
                        },
                        new
                        {
                            StudentId = 5,
                            EventId = 3
                        },
                        new
                        {
                            StudentId = 5,
                            EventId = 4
                        },
                        new
                        {
                            StudentId = 5,
                            EventId = 5
                        },
                        new
                        {
                            StudentId = 5,
                            EventId = 6
                        },
                        new
                        {
                            StudentId = 6,
                            EventId = 1
                        },
                        new
                        {
                            StudentId = 6,
                            EventId = 2
                        },
                        new
                        {
                            StudentId = 6,
                            EventId = 3
                        },
                        new
                        {
                            StudentId = 6,
                            EventId = 4
                        },
                        new
                        {
                            StudentId = 6,
                            EventId = 5
                        },
                        new
                        {
                            StudentId = 6,
                            EventId = 6
                        },
                        new
                        {
                            StudentId = 7,
                            EventId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            EventId = 2
                        },
                        new
                        {
                            StudentId = 7,
                            EventId = 3
                        },
                        new
                        {
                            StudentId = 7,
                            EventId = 4
                        },
                        new
                        {
                            StudentId = 7,
                            EventId = 5
                        },
                        new
                        {
                            StudentId = 7,
                            EventId = 6
                        },
                        new
                        {
                            StudentId = 8,
                            EventId = 1
                        },
                        new
                        {
                            StudentId = 8,
                            EventId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            EventId = 3
                        },
                        new
                        {
                            StudentId = 8,
                            EventId = 4
                        },
                        new
                        {
                            StudentId = 8,
                            EventId = 5
                        },
                        new
                        {
                            StudentId = 8,
                            EventId = 6
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.StudentExam", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("ExamId");

                    b.Property<DateTime>("DateTaken");

                    b.Property<int>("Points");

                    b.HasKey("StudentId", "ExamId", "DateTaken");

                    b.HasIndex("ExamId");

                    b.ToTable("StudentExams");

                    b.HasData(
                        new
                        {
                            StudentId = 3,
                            ExamId = 1,
                            DateTaken = new DateTime(2019, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Points = 115
                        },
                        new
                        {
                            StudentId = 3,
                            ExamId = 2,
                            DateTaken = new DateTime(2019, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Points = 55
                        },
                        new
                        {
                            StudentId = 4,
                            ExamId = 1,
                            DateTaken = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Points = 100
                        },
                        new
                        {
                            StudentId = 4,
                            ExamId = 2,
                            DateTaken = new DateTime(2019, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Points = 35
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FuelType");

                    b.Property<string>("Image");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Model");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FuelType = "Gasoline",
                            Image = "",
                            LicensePlate = "ST-200-OK",
                            Manufacturer = "Volkswagen",
                            Model = "Golf 7",
                            Type = "Car"
                        },
                        new
                        {
                            Id = 2,
                            FuelType = "Gasoline",
                            Image = "",
                            LicensePlate = "ST-404-NF",
                            Manufacturer = "Mercedes",
                            Model = "A Class",
                            Type = "Car"
                        },
                        new
                        {
                            Id = 3,
                            FuelType = "Diesel",
                            Image = "",
                            LicensePlate = "ST-500-FB",
                            Manufacturer = "Renault",
                            Model = "Megane III",
                            Type = "Car"
                        },
                        new
                        {
                            Id = 4,
                            FuelType = "Gasoline",
                            Image = "",
                            LicensePlate = "ST-408-TO",
                            Manufacturer = "Kawasaki",
                            Model = "ZZR",
                            Type = "Motorcycle"
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleId");

                    b.Property<int>("StudentId");

                    b.Property<int>("InstructorId");

                    b.Property<DateTime>("DateAssigned");

                    b.Property<bool>("IsActive");

                    b.HasKey("VehicleId", "StudentId", "InstructorId", "DateAssigned");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("VehicleSessions");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            StudentId = 1,
                            InstructorId = 1,
                            DateAssigned = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            VehicleId = 2,
                            StudentId = 2,
                            InstructorId = 2,
                            DateAssigned = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            VehicleId = 3,
                            StudentId = 3,
                            InstructorId = 3,
                            DateAssigned = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            VehicleId = 4,
                            StudentId = 8,
                            InstructorId = 4,
                            DateAssigned = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            VehicleId = 2,
                            StudentId = 4,
                            InstructorId = 2,
                            DateAssigned = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            VehicleId = 4,
                            StudentId = 7,
                            InstructorId = 4,
                            DateAssigned = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Admin", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.DrivingSchool", "DrivingSchool")
                        .WithMany("Admins")
                        .HasForeignKey("DrivingSchoolId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Answer", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Event", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Instructor", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.DrivingSchool", "DrivingSchool")
                        .WithMany("Instructors")
                        .HasForeignKey("DrivingSchoolId");

                    b.HasOne("Retrovizor.Data.Entities.Models.Vehicle", "Vehicle")
                        .WithMany("Instructors")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Review", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.Instructor", "Instructor")
                        .WithMany("Reviews")
                        .HasForeignKey("InstructorId");

                    b.HasOne("Retrovizor.Data.Entities.Models.Student", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.Student", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.DrivingSchool", "DrivingSchool")
                        .WithMany("Students")
                        .HasForeignKey("DrivingSchoolId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.StudentClass", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId");

                    b.HasOne("Retrovizor.Data.Entities.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.StudentEvent", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.Event", "Event")
                        .WithMany("StudentEvents")
                        .HasForeignKey("EventId");

                    b.HasOne("Retrovizor.Data.Entities.Models.Student", "Student")
                        .WithMany("StudentEvents")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.StudentExam", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.Exam", "Exam")
                        .WithMany("StudentExams")
                        .HasForeignKey("ExamId");

                    b.HasOne("Retrovizor.Data.Entities.Models.Student", "Student")
                        .WithMany("StudentExams")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Retrovizor.Data.Entities.Models.VehicleSession", b =>
                {
                    b.HasOne("Retrovizor.Data.Entities.Models.Instructor", "Instructor")
                        .WithMany("VehicleSessions")
                        .HasForeignKey("InstructorId");

                    b.HasOne("Retrovizor.Data.Entities.Models.Student", "Student")
                        .WithMany("VehicleSessions")
                        .HasForeignKey("StudentId");

                    b.HasOne("Retrovizor.Data.Entities.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleSessions")
                        .HasForeignKey("VehicleId");
                });
#pragma warning restore 612, 618
        }
    }
}
